# YSBD2
Yλοποίηση και Χρήση Βάσεων Δεδομένων - Εργασία 2 - Χειμερινό Εξάμηνο 2023

Μέλη Ομάδας:
	Σωτήρης Σκανδάλης - 1115202000181
	Χρήστος Παπαδόπουλος - 1115202000165
	Άρης Μπουτσιαράκος - 1115202000146


Οδηγίες εκτέλεσης:

	Για την δημιουργία του εκτελέσιμου με τα tests:
		make ht

	Για να τρέξετε τα tests:
		make run

Νέες δομές, συναρτήσεις, σταθερές:

	Πέραν των δωσμένων δομών, ορίσαμε:
		Τη δομή ht_info η οποία περιέχει τις εξής πληροφορίες για το αρχείο:
			Συνολικός αριθμός εγγραφών, ολικό βάθος, τύπος αρχείου(heap ή hash), δείκτης προς τον πίνακα κατακερματισμού.
		Τη δομή ht_block_info η οποία περιέχει τις εξής πληροφορίες για το block:
			Αριθμό εγγραφών, τοπικό βάθος.
		Τη δομή table_file_entry η οποία χρησιμοποιείται στον πίνακα με τα ανοιχτά αρχεία και περιέχει:
			Το όνομα του αρχείου, το αναγνωριστικό του αρχείου(fileDesc).

	Ορίσαμε τη σταθερά RECORDS_PER_BLOCK, η οποία ισούται με [(BF_BLOCK_SIZE - sizeof(HT_block_info)) / sizeof(Record)],
	δηλαδή το μέγεθος του block χωρίς τη δομή ht_block_info δια το μέγεθος της κάθε εγγραφής.

	Ορίσαμε τις εξής βοηθητικές συναρτήσεις:

		HT_info *getInfo(int indexDesc):
			Η συνάρτηση φέρνει στη μνήμη το block μεταδεδομένων του αρχείου που βρίσκεται στη θέση indexDesc του πίνακα
			ανοιχτών αρχείων και επιστρέφει έναν δείκτη στο block αυτό.

		int hash_Function(int num):
			Η συνάρτηση κατακερματισμού που έχουμε χρησιμοποιήσει είναι αρκετά απλή

		void reHash(int fileDesc, int oldBlockPos, int newBlockPos, int *hashTable, int globalDepth):
			Η συνάρτηση αυτή παίρνει τις θέσεις από δύο blocks που ήταν φιλαράκια, το αναγνωριστικό του αρχείου, δείκτη στον 
			πίνακα κατακερματισμού και το ολικό βάθος και εφαρμόζει τη συνάρτηση κατακερματισμού για κάθε εγγραφή με σκοπό την 
			ανακατανομή των εγγραφών στα blocks.

		unsigned int getMSBs(unsigned int num, int depth):
			Η συνάρτηση αυτή δέχεται ως όρισμα έναν αριθμό και έναν αριθμό ψηφίων depth και επιστρέφει τα depth πιο σημαντικά
			bits του αριθμού αυτού.

		void resizeHashTable(HT_info *info):
			Η συνάρτηση αυτή διπλασιάζει τον πίνακα κατακερματισμού τον οποίο παίρνει μέσα από το HT_info το οποίο στο τέλος 
			ενημερώνει με τον νέο πίνακα. Για τον διπλασιασμό, δεσμεύουμε την κατάλληλη μνήμη και για κάθε θέση i του παλιού πίνακα
			η οποία δείχνει σε μία θέση x, οι θέσεις (2*i) και (2*i + 1) θα δείχνουν στη θέση x.



